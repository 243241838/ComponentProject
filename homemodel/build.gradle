if (isModuleRun.toBoolean()){
    apply plugin: 'com.android.application'
}else {
    apply plugin: 'com.android.library'
}
//butterKnife插件的应用
apply plugin: 'com.jakewharton.butterknife'

def cfg = rootProject.ext.android
def appId = rootProject.ext.appId
def librarys = rootProject.ext.dependencies
def annotlibrarys = rootProject.ext.annotdependencies

android {
    packagingOptions {
        exclude 'META-INF/rxjava.properties'
    }

    compileSdkVersion cfg.compileSdkVersion
    buildToolsVersion cfg.buildToolsVersion
    defaultConfig {
        if (isModuleRun.toBoolean()) {
            applicationId appId["home"]
        }
        minSdkVersion cfg.minSdkVersion
        targetSdkVersion cfg.targetSdkVersion
        versionCode cfg.versionCode
        versionName cfg.versionName
        testInstrumentationRunner "android.support.test.runner.AndroidJUnitRunner"
        multiDexEnabled true
    }
    sourceSets {
        main {
            if (isModuleRun.toBoolean()) {
                manifest.srcFile 'src/main/debug/AndroidManifest.xml'
            } else {
                manifest.srcFile 'src/main/AndroidManifest.xml/'
                java {
                    //release 时 debug目录下文件不需要合并到主工程
                    exclude '**/debug/**'
                }
            }
        }
    }
    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            //matchingFallbacks = ['release']
        }
        debug {
            //matchingFallbacks = ['debug']
        }
    }
}

dependencies {
    implementation fileTree(include: ['*.jar'], dir: 'libs')
    testImplementation 'junit:junit:4.12'
    compile project(':routermodel')
    librarys.each { k, v -> compile v }
    annotlibrarys.each { k, v -> annotationProcessor v }
}
